


local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/linemaster2/esp-library/main/library.lua"))();


ESP.Enabled = false;
ESP.ShowBox = false;
ESP.ShowName = false;
ESP.ShowHealth = false;
ESP.ShowTracer = false;
ESP.ShowDistance = false;
ESP.ShowSkeletons = false;

    local ESP_SETTINGS = {
        BoxOutlineColor = Color3.new(0, 0, 0),
        BoxColor = Color3.new(1, 1, 1),
        NameColor = Color3.new(1, 1, 1),
        HealthOutlineColor = Color3.new(0, 0, 0),
        HealthHighColor = Color3.new(0, 1, 0),
        HealthLowColor = Color3.new(1, 0, 0),
        CharSize = Vector2.new(4, 6),
        Teamcheck = false,
        WallCheck = false,
        Enabled = false,
        ShowBox = false,
        BoxType = "2D",
        ShowName = false,
        ShowHealth = false,
        ShowDistance = false,
        ShowSkeletons = false,
        ShowTracer = false,
        TracerColor = Color3.new(1, 1, 1), 
        TracerThickness = 2,
        SkeletonsColor = Color3.new(1, 1, 1),
        TracerPosition = "Bottom",
    }
    

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()



local Window = OrionLib:MakeWindow({IntroText = "By: thaibao7444",Name = "Tbao Hub | Rivals", HidePremium = false, SaveConfig = true, ConfigFolder = ""})


Tab = Window:MakeTab({Name = "Info", Icon = "rbxassetid://4483345998",PremiumOnly = false })


Tab:AddParagraph("By: thaibao7444","Discord: discord.gg/bYb3EweNk7")




Tab:AddButton({
	Name = "Copy link discord",
	Callback = function()
setclipboard("discord.gg/bYb3EweNk7")
  	end    
})


local Tab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


local Section = Tab:AddSection({
	Name = "Aimbot"
})




local aimbotEnabled = false
local wallCheckEnabled = false
local aimAtPart = "HumanoidRootPart"
local function getClosestTarget()
    local Cam = workspace.CurrentCamera
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local localRoot = character:WaitForChild("HumanoidRootPart")
    local nearestTarget = nil
    local shortestDistance = math.huge

    local function checkTarget(target)
        if target and target:IsA("Model") and target:FindFirstChild("Humanoid") and target:FindFirstChild(aimAtPart) then
            local targetRoot = target[aimAtPart]
            local distance = (targetRoot.Position - localRoot.Position).Magnitude

            if distance < shortestDistance then
                if wallCheckEnabled then
                    local rayDirection = (targetRoot.Position - Cam.CFrame.Position).Unit * 299
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterDescendantsInstances = {character}
                    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

                    local raycastResult = workspace:Raycast(Cam.CFrame.Position, rayDirection, raycastParams)

                    if raycastResult and raycastResult.Instance:IsDescendantOf(target) then
                        shortestDistance = distance
                        nearestTarget = target
                    end
                else
                    shortestDistance = distance
                    nearestTarget = target
                end
            end
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and (not teamCheckEnabled or player.Team ~= localPlayer.Team) then
            checkTarget(player.Character)
        end
    end

    if targetNPCs then
        for _, npc in pairs(workspace:GetDescendants()) do
            checkTarget(npc)
        end
    end

    return nearestTarget
end


local function lookAt(targetPosition)
    local Cam = workspace.CurrentCamera
    if targetPosition then
        Cam.CFrame = CFrame.new(Cam.CFrame.Position, targetPosition)
    end
end

local function aimAtTarget()
    local runService = game:GetService("RunService")
    local connection
    connection = runService.RenderStepped:Connect(function()
        if not aimbotEnabled then
            connection:Disconnect()
            return
        end

        local closestTarget = getClosestTarget()
        if closestTarget and closestTarget:FindFirstChild(aimAtPart) then
            local targetRoot = closestTarget[aimAtPart]

            while aimbotEnabled and closestTarget and closestTarget:FindFirstChild(aimAtPart) and closestTarget.Humanoid.Health > 0 do
                lookAt(targetRoot.Position)
                local rayDirection = (targetRoot.Position - workspace.CurrentCamera.CFrame.Position).Unit * 299
                local raycastParams = RaycastParams.new()
                raycastParams.FilterDescendantsInstances = {character}
                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

                local raycastResult = workspace:Raycast(workspace.CurrentCamera.CFrame.Position, rayDirection, raycastParams)

                if not raycastResult or not raycastResult.Instance:IsDescendantOf(closestTarget) then
                    break
                end

                runService.RenderStepped:Wait()
            end
        end
    end)
end

Tab:AddToggle({
	Name = "Aimbot",
	Default = false,
	Callback = function(Value)
aimbotEnabled = Value
		if aimbotEnabled then
			aimAtTarget()
		end
	end    
})

Tab:AddToggle({
	Name = "Walk check",
	Default = false,
	Callback = function(Value)
wallCheckEnabled = Value
	end    
})



Tab:AddDropdown({
	Name = "Aim part",
	Default = "1",
	Options = {"Head", "HumanoidRootPart"},
	Callback = function(value)
        if aimAtPart == "HumanoidRootPart" then
			aimAtPart = "Head"
		else
			aimAtPart = "HumanoidRootPart"
		end	
	end    
})





local Section = Tab:AddSection({
	Name = "Silent aim"
})




getgenv().SilentAim = false              
getgenv().AimPart = "HumanoidRootPart"   


local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Cam = game.Workspace.CurrentCamera
local replicated_storage = game:GetService("ReplicatedStorage")
local utility = require(replicated_storage:FindFirstChild("Modules").Utility)


local FOVring = Drawing.new("Circle")
FOVring.Visible = false 
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(255, 0, 0)
FOVring.Filled = false
FOVring.Radius = 100 
FOVring.Position = Cam.ViewportSize / 2


local function updateFOV()
    FOVring.Position = Cam.ViewportSize / 2
end

local function onKeyDown(input)
    if input.KeyCode == Enum.KeyCode.Delete then
        RunService:UnbindFromRenderStep("FOVUpdate")
        FOVring:Remove()
    end
end


RunService:BindToRenderStep("FOVUpdate", Enum.RenderPriority.Camera.Value, updateFOV)
UserInputService.InputBegan:Connect(onKeyDown)

local function getPlayersOrEntities()
    local entities = {}
    for _, child in ipairs(workspace:GetChildren()) do
        if child:FindFirstChildOfClass("Humanoid") then
            table.insert(entities, child)
        elseif child.Name == "HurtEffect" then
            for _, hurtPlayer in ipairs(child:GetChildren()) do
                if hurtPlayer.ClassName ~= "Highlight" then
                    table.insert(entities, hurtPlayer)
                end
            end
        end
    end
    return entities
end

local function isEnemy(player)
    if not getgenv().TeamCheck then
        return true
    end
    return player.Team ~= Players.LocalPlayer.Team
end


local function getClosestPlayer()
    if not getgenv().SilentAim then return nil end

    local closest, closestDistance = nil, math.huge
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character

    if not character then return nil end

    for _, player in ipairs(getPlayersOrEntities()) do
        if player == localPlayer then continue end
        if not player:FindFirstChild(getgenv().AimPart) then continue end
        if not isEnemy(player) then continue end

        local position, onScreen = Cam:WorldToViewportPoint(player[getgenv().AimPart].Position)
        if not onScreen then continue end

        local center = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)
        local distance = (center - Vector2.new(position.X, position.Y)).Magnitude

        if distance < closestDistance and distance <= FOVring.Radius then
            closest = player
            closestDistance = distance
        end
    end

    return closest
end


local oldRaycast = utility.Raycast
utility.Raycast = function(...)
    local arguments = { ... }

    if #arguments > 0 and arguments[4] == 999 then
        local closest = getClosestPlayer()
        if closest then
            arguments[3] = closest[getgenv().AimPart].Position
        end
    end

    return oldRaycast(table.unpack(arguments))
end





Tab:AddToggle({
	Name = "Silent aim",
	Default = false,
	Callback = function(value)
getgenv().SilentAim = value
	end    
})


Tab:AddDropdown({
	Name = "Aim part",
	Default = "1",
	Options = {"HumanoidRootPart", "Head"},
	Callback = function(value)
getgenv().AimPart = value
	end    
})

Tab:AddToggle({
	Name = "Fov",
	Default = false,
	Callback = function(value)
FOVring.Visible = value
	end    
})


Tab:AddSlider({
	Name = "Fov value",
	Min = 0,
	Max = 500,
	Default = 100,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "",
	Callback = function(value)
FOVring.Radius = value 
	end    
})



Tab:AddColorpicker({
	Name = "Fov color",
	Default = Color3.fromRGB(255, 0, 0),
	Callback = function(value)
FOVring.Color = value
	end	  
})



local Tab = Window:MakeTab({
	Name = "Visuals",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Visuals"
})


local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")


getgenv().ColorEnabled = false 
getgenv().RainbowEnabled = false 


local targetColor = false 


if Lighting:FindFirstChildOfClass("Sky") then
    Lighting:FindFirstChildOfClass("Sky"):Destroy()
end


local function setWorldColor()
    if getgenv().RainbowEnabled then

        local hue = tick() % 5 / 5
        targetColor = Color3.fromHSV(hue, 1, 1)
    end

    if getgenv().ColorEnabled or getgenv().RainbowEnabled then
        Lighting.Ambient = targetColor
        Lighting.OutdoorAmbient = targetColor
        Lighting.FogColor = targetColor
        Lighting.ColorShift_Bottom = targetColor
        Lighting.ColorShift_Top = targetColor
    else

        Lighting.Ambient = Color3.fromRGB(127, 127, 127)
        Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        Lighting.FogColor = Color3.fromRGB(255, 255, 255)
        Lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
        Lighting.ColorShift_Top = Color3.fromRGB(0, 0, 0)
    end
end


RunService.RenderStepped:Connect(setWorldColor)

Tab:AddToggle({
	Name = "Fog",
	Default = false,
	Callback = function(state)
getgenv().ColorEnabled = state 
	end    
})


Tab:AddToggle({
	Name = "Fog rainbow",
	Default = false,
	Callback = function(state)
getgenv().RainbowEnabled = state 
	end    
})




Tab:AddColorpicker({
	Name = "Fog color",
	Default = Color3.fromRGB(255, 0, 0),
	Callback = function(Value)
targetColor = Value
	end	  
})

local Section = Tab:AddSection({
	Name = "Crosshair"
})


local CrosshairEnabled = false


Tab:AddToggle({
	Name = "Crosshair",
	Default = false,
	Callback = function(value)
CrosshairEnabled = value 
	end    
})




getgenv().crosshair = {
    enabled = true,
    refreshrate = 0.015,
    mode = 'center',
    position = Vector2.new(0, 0),
    width = 2.5,
    length = 10,
    radius = 11,
    color = Color3.fromRGB(86, 87, 142), 
    spin = true,
    spin_speed = 150,
    spin_max = 340,
    spin_style = Enum.EasingStyle.Circular,
    resize = true,
    resize_speed = 150,
    resize_min = 5,
    resize_max = 22,
}

local old; old = hookfunction(Drawing.new, function(class, properties)
    local drawing = old(class)
    for i, v in next, properties or {} do
        drawing[i] = v
    end
    return drawing
end)

local runservice = game:GetService('RunService')
local inputservice = game:GetService('UserInputService')
local tweenservice = game:GetService('TweenService')
local camera = workspace.CurrentCamera

local last_render = 0

local drawings = {
    crosshair = {},
    text = {
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = 'Tbao', Color = Color3.new(52, 152, 219)}),
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = 'Hub', Color = Color3.fromRGB(86, 87, 142)}),
    }
}

for idx = 1, 4 do
    drawings.crosshair[idx] = Drawing.new('Line')
    drawings.crosshair[idx + 4] = Drawing.new('Line')
end

function solve(angle, radius)
    return Vector2.new(
        math.sin(math.rad(angle)) * radius,
        math.cos(math.rad(angle)) * radius
    )
end

runservice.PostSimulation:Connect(function()
    local _tick = tick()

    if _tick - last_render > crosshair.refreshrate then
        last_render = _tick

        local position = camera.ViewportSize / 2

        local text_1 = drawings.text[1]
        local text_2 = drawings.text[2]

        text_1.Visible = CrosshairEnabled
        text_2.Visible = CrosshairEnabled

        if CrosshairEnabled then
            local text_x = text_1.TextBounds.X + text_2.TextBounds.X

            text_1.Position = position + Vector2.new(-text_x / 2, crosshair.radius + (crosshair.resize and crosshair.resize_max or crosshair.length) + 5)
            text_2.Position = text_1.Position + Vector2.new(text_1.TextBounds.X, 0)
            text_2.Color = Color3.fromRGB(86, 87, 142)

            for idx = 1, 4 do
                local outline = drawings.crosshair[idx]
                local inline = drawings.crosshair[idx + 4]

                local angle = (idx - 1) * 90
                local length = crosshair.length

                if crosshair.spin then
                    local spin_angle = -_tick * crosshair.spin_speed % crosshair.spin_max
                    angle = angle + tweenservice:GetValue(spin_angle / 360, crosshair.spin_style, Enum.EasingDirection.InOut) * 360
                end

                if crosshair.resize then
                    local resize_length = tick() * crosshair.resize_speed % 180
                    length = crosshair.resize_min + math.sin(math.rad(resize_length)) * crosshair.resize_max
                end

                inline.Visible = true
                inline.Color = Color3.fromRGB(86, 87, 142)  
                inline.From = position + solve(angle, crosshair.radius)
                inline.To = position + solve(angle, crosshair.radius + length)
                inline.Thickness = crosshair.width

                outline.Visible = true
                outline.From = position + solve(angle, crosshair.radius - 1)
                outline.To = position + solve(angle, crosshair.radius + length + 1)
                outline.Thickness = crosshair.width + 1.5    
            end
        else
            for idx = 1, 4 do
                drawings.crosshair[idx].Visible = false
                drawings.crosshair[idx + 4].Visible = false
            end
        end
    end
end)

local IJ = false
Tab:AddToggle({
	Name = "Inf jump",
	Default = false,
	Callback = function(state)
		IJ = state
      game:GetService("UserInputService").JumpRequest:Connect(function()
          if IJ then
              game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
          end
      end)
	end    
})

Tab:AddToggle({
	Name = "No clip",
	Default = false,
	Callback = function(Value)
		getgenv().NoclipEnabled = Value 
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local function noclip()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.CanCollide == true then
            part.CanCollide = false
        end
    end
end
local function noclipLoop()
    RunService.Stepped:Connect(function()
        if getgenv().NoclipEnabled then
            noclip()
        end
    end)
end
noclipLoop()
	end    
})



Tab = Window:MakeTab({Name = "Esp", Icon = "rbxassetid://4483345998",PremiumOnly = false })

Tab:AddToggle({
	Name = "Enabled",
	Default = true,
	Callback = function(Value)
		ESP.Enabled = Value;
	end    
})


Tab:AddToggle({
	Name = "Team check",
	Default = false,
	Callback = function(Value)
	ESP.Teamcheck = Value;	
	end    
})

Tab:AddToggle({
	Name = "Box",
	Default = false,
	Callback = function(Value)
		ESP.ShowBox = Value;
	end    
})

Tab:AddToggle({
	Name = "Name",
	Default = false,
	Callback = function(Value)
		ESP.ShowName = Value;
	end    
})

Tab:AddToggle({
	Name = "Health",
	Default = false,
	Callback = function(Value)
		ESP.ShowHealth = Value;
	end    
})

Tab:AddToggle({
	Name = "Tracer",
	Default = false,
	Callback = function(Value)
		ESP.ShowTracer = Value;
	end    
})

Tab:AddToggle({
	Name = "Distance",
	Default = false,
	Callback = function(Value)
		ESP.ShowDistance = Value;
	end    
})

Tab:AddToggle({
	Name = "Skeletons",
	Default = false,
	Callback = function(Value)
		ESP.ShowSkeletons = Value;
	end    
})

Tab:AddDropdown({
	Name = "Tracer",
	Default = "Bottom",
	Options = {"Bottom", "Top", "Middle"},
	Callback = function(Value)
		ESP.TracerPosition = Value;
	end    
})

Tab:AddDropdown({
	Name = "Box",
	Default = "2D",
	Options = {"2D", "Corner Box Esp"},
	Callback = function(Value)
		ESP.BoxType = Value
	end    
})


