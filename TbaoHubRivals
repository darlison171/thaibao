local repo = 'https://raw.githubusercontent.com/deividcomsono/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Options = getgenv().Linoria.Options
local Toggles = getgenv().Linoria.Toggles

Library.ShowToggleFrameInKeybinds = true 
Library.ShowCustomCursor = true 
Library.NotifySide = "Right" 

local Window = Library:CreateWindow({

	Title = 'Tbao Hub | Rivals',
	Center = true,
	AutoShow = true,
	Resizable = true,
	ShowCustomCursor = true,
	NotifySide = "Right",
	TabPadding = 8,
	MenuFadeTime = 0.2
})


local Tabs = {
	Discord = Window:AddTab('Info'),
    Main = Window:AddTab('Main'),
    Esp = Window:AddTab('Esp'),
                ['UI Settings'] = Window:AddTab('UI Settings'),
}



local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Aimbot')

local cl = Tabs.Discord:AddLeftGroupbox('Discord')

local MyButton = cl:AddButton({
    Text = 'Copy link discord',
    Func = function()
setclipboard("discord.gg/bYb3EweNk7")
    end,
    DoubleClick = false,
})




getgenv().BloodLossNotificationEnabled = false 
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer


local function notifyBloodLoss(player)
    if getgenv().BloodLossNotificationEnabled then
        if player and player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                local health = math.floor(humanoid.Health)
                Library:Notify("Name: " .. player.Name .. " Health: " .. health)
            else
                Library:Notify(player.Name .. " is bleeding, but health is unknown")
            end
        else
            Library:Notify("Blood loss detected, but the player is invalid")
        end
    end
end


local function trackPlayer(player)
    if player == LocalPlayer then return end
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

   
    humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if humanoid.Health < humanoid.MaxHealth and humanoid.Health > 0 then
            notifyBloodLoss(player)
        end
    end)

   
    player.CharacterAdded:Connect(function(newCharacter)
        local newHumanoid = newCharacter:WaitForChild("Humanoid")
        newHumanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if newHumanoid.Health < newHumanoid.MaxHealth and newHumanoid.Health > 0 then
                notifyBloodLoss(player)
            end
        end)
    end)
end


for _, player in ipairs(Players:GetPlayers()) do
    trackPlayer(player)
end

Players.PlayerAdded:Connect(trackPlayer)






local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/linemaster2/esp-library/main/library.lua"))();


ESP.Enabled = false;
ESP.ShowBox = false;
ESP.ShowName = false;
ESP.ShowHealth = false;
ESP.ShowTracer = false;
ESP.ShowDistance = false;
ESP.ShowSkeletons = false;

    local ESP_SETTINGS = {
        BoxOutlineColor = Color3.new(0, 0, 0),
        BoxColor = Color3.new(1, 1, 1),
        NameColor = Color3.new(1, 1, 1),
        HealthOutlineColor = Color3.new(0, 0, 0),
        HealthHighColor = Color3.new(0, 1, 0),
        HealthLowColor = Color3.new(1, 0, 0),
        CharSize = Vector2.new(4, 6),
        Teamcheck = false,
        WallCheck = false,
        Enabled = false,
        ShowBox = false,
        BoxType = "2D",
        ShowName = false,
        ShowHealth = false,
        ShowDistance = false,
        ShowSkeletons = false,
        ShowTracer = false,
        TracerColor = Color3.new(1, 1, 1), 
        TracerThickness = 2,
        SkeletonsColor = Color3.new(1, 1, 1),
        TracerPosition = "Bottom",
    }
    
    
    



local fov = 100
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Cam = game.Workspace.CurrentCamera

local FOVring = Drawing.new("Circle")
FOVring.Visible = false
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(255, 0, 0) 
FOVring.Filled = false
FOVring.Radius = fov
FOVring.Position = Cam.ViewportSize / 2

local function updateDrawings()
    local camViewportSize = Cam.ViewportSize
    FOVring.Position = camViewportSize / 2
end

local function onKeyDown(input)
    if input.KeyCode == Enum.KeyCode.Delete then
        RunService:UnbindFromRenderStep("FOVUpdate")
        FOVring:Remove()
    end
end





local aimbotEnabled = false
local wallCheckEnabled = false
local aimAtPart = "HumanoidRootPart"
local teamCheckEnabled = false
local headSizeEnabled = false
local function getClosestTarget()
    local Cam = workspace.CurrentCamera
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local localRoot = character:WaitForChild("HumanoidRootPart")
    local nearestTarget = nil
    local shortestDistance = math.huge

    local function checkTarget(target)
        if target and target:IsA("Model") and target:FindFirstChild("Humanoid") and target:FindFirstChild(aimAtPart) then
            local targetRoot = target[aimAtPart]
            local distance = (targetRoot.Position - localRoot.Position).Magnitude

            if distance < shortestDistance then
                if wallCheckEnabled then
                    local rayDirection = (targetRoot.Position - Cam.CFrame.Position).Unit * 299
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterDescendantsInstances = {character}
                    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

                    local raycastResult = workspace:Raycast(Cam.CFrame.Position, rayDirection, raycastParams)

                    if raycastResult and raycastResult.Instance:IsDescendantOf(target) then
                        shortestDistance = distance
                        nearestTarget = target
                    end
                else
                    shortestDistance = distance
                    nearestTarget = target
                end
            end
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and (not teamCheckEnabled or player.Team ~= localPlayer.Team) then
            checkTarget(player.Character)
        end
    end

    if targetNPCs then
        for _, npc in pairs(workspace:GetDescendants()) do
            checkTarget(npc)
        end
    end

    return nearestTarget
end

local function lookAt(targetPosition)
    local Cam = workspace.CurrentCamera
    if targetPosition then
        Cam.CFrame = CFrame.new(Cam.CFrame.Position, targetPosition)
    end
end

local function aimAtTarget()
    local runService = game:GetService("RunService")
    local connection
    connection = runService.RenderStepped:Connect(function()
        if not aimbotEnabled then
            connection:Disconnect()
            return
        end

        local closestTarget = getClosestTarget()
        if closestTarget and closestTarget:FindFirstChild(aimAtPart) then
            local targetRoot = closestTarget[aimAtPart]

            while aimbotEnabled and closestTarget and closestTarget:FindFirstChild(aimAtPart) and closestTarget.Humanoid.Health > 0 do
                lookAt(targetRoot.Position)
                local rayDirection = (targetRoot.Position - workspace.CurrentCamera.CFrame.Position).Unit * 299
                local raycastParams = RaycastParams.new()
                raycastParams.FilterDescendantsInstances = {character}
                raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

                local raycastResult = workspace:Raycast(workspace.CurrentCamera.CFrame.Position, rayDirection, raycastParams)

                if not raycastResult or not raycastResult.Instance:IsDescendantOf(closestTarget) then
                    break
                end

                runService.RenderStepped:Wait()
            end
        end
    end)
end

local f = Tabs.Main:AddLeftGroupbox('Aim')




f:AddToggle('MyToggle', {
    Text = 'Silent aim',
    Default = false,
    Callback = function(state)
        getgenv().enabled = state
    end
})





f:AddDropdown('MyDropdown', {
    Values = { 'Head', 'HumanoidRootPart', 'Torso' },
    Default = 3, 
    Multi = false,
    Text = 'Aim part',
})


Options.MyDropdown:OnChanged(function(selected)
    getgenv().aimpart = selected
end)




LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Aimbot',
    Default = false,
    Callback = function(Value)
        aimbotEnabled = Value
		if aimbotEnabled then
			aimAtTarget()
		end
    end
})




LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Walk check',
    Default = false,

    Callback = function(Value)
        wallCheckEnabled = Value
    end
})


LeftGroupBox:AddLabel('Aimbot key'):AddKeyPicker('KeyPicker', {
    Default = 'Q', 
    SyncToggleState = true, 
    Mode = 'Toggle', 

    Text = '', 
    NoUI = false, 
})

Options.KeyPicker:OnClick(function(Value)
   aimbotEnabled = Value
		if aimbotEnabled then
			aimAtTarget()
		end
end)


LeftGroupBox:AddDropdown('MyDropdown', {
    Values = { 'HumanoidRootPart', 'Head' },
    Default = 2, 
    Multi = false, 

    Text = 'Aim part',
   
})

Options.MyDropdown:OnChanged(function()
        if aimAtPart == "HumanoidRootPart" then
			aimAtPart = "Head"
		else
			aimAtPart = "HumanoidRootPart"
		end	
end)


local gay = Tabs.Main:AddRightGroupbox('Fov')



gay:AddToggle('MyToggle', {
    Text = 'Show fov' ,
    Default = false,
    

    Callback = function(Value)
        FOVring.Visible = Value
    end
})

gay:AddLabel('Color'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0), 
    Title = 'Fov color', 
    Transparency = 0, 

    Callback = function(Value)
        FOVring.Color = Value	
    end
})


gay:AddSlider('MySlider', {
    Text = 'Fov value',
    Default = 90,
    Min = 88,
    Max = 300,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        FOVring.Radius = Value
    end
})

gay:AddSlider('MySlider', {
    Text = 'Fov thickness',
    Default = 10,
    Min = 1,
    Max = 300,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        FOVring.Thickness = Value
    end
})




local visuals = Tabs.Main:AddLeftGroupbox("Visuals")


local CrosshairEnabled = false


visuals:AddToggle('MyToggle', {
    Text = 'Crosshair',
    Default = false,
    Callback = function(state)
        CrosshairEnabled = state
    end
})

getgenv().crosshair = {
    enabled = true,
    refreshrate = 0.015,
    mode = 'center',
    position = Vector2.new(0, 0),
    width = 2.5,
    length = 10,
    radius = 11,
    color = Color3.fromRGB(86, 87, 142), 
    spin = true,
    spin_speed = 150,
    spin_max = 340,
    spin_style = Enum.EasingStyle.Circular,
    resize = true,
    resize_speed = 150,
    resize_min = 5,
    resize_max = 22,
}

local old; old = hookfunction(Drawing.new, function(class, properties)
    local drawing = old(class)
    for i, v in next, properties or {} do
        drawing[i] = v
    end
    return drawing
end)

local runservice = game:GetService('RunService')
local inputservice = game:GetService('UserInputService')
local tweenservice = game:GetService('TweenService')
local camera = workspace.CurrentCamera

local last_render = 0

local drawings = {
    crosshair = {},
    text = {
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = 'Tbao', Color = Color3.new(52, 152, 219)}),
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = 'Hub', Color = Color3.fromRGB(86, 87, 142)}),
    }
}

for idx = 1, 4 do
    drawings.crosshair[idx] = Drawing.new('Line')
    drawings.crosshair[idx + 4] = Drawing.new('Line')
end

function solve(angle, radius)
    return Vector2.new(
        math.sin(math.rad(angle)) * radius,
        math.cos(math.rad(angle)) * radius
    )
end

runservice.PostSimulation:Connect(function()
    local _tick = tick()

    if _tick - last_render > crosshair.refreshrate then
        last_render = _tick

        local position = camera.ViewportSize / 2

        local text_1 = drawings.text[1]
        local text_2 = drawings.text[2]

        text_1.Visible = CrosshairEnabled
        text_2.Visible = CrosshairEnabled

        if CrosshairEnabled then
            local text_x = text_1.TextBounds.X + text_2.TextBounds.X

            text_1.Position = position + Vector2.new(-text_x / 2, crosshair.radius + (crosshair.resize and crosshair.resize_max or crosshair.length) + 5)
            text_2.Position = text_1.Position + Vector2.new(text_1.TextBounds.X, 0)
            text_2.Color = Color3.fromRGB(86, 87, 142)

            for idx = 1, 4 do
                local outline = drawings.crosshair[idx]
                local inline = drawings.crosshair[idx + 4]

                local angle = (idx - 1) * 90
                local length = crosshair.length

                if crosshair.spin then
                    local spin_angle = -_tick * crosshair.spin_speed % crosshair.spin_max
                    angle = angle + tweenservice:GetValue(spin_angle / 360, crosshair.spin_style, Enum.EasingDirection.InOut) * 360
                end

                if crosshair.resize then
                    local resize_length = tick() * crosshair.resize_speed % 180
                    length = crosshair.resize_min + math.sin(math.rad(resize_length)) * crosshair.resize_max
                end

                inline.Visible = true
                inline.Color = Color3.fromRGB(86, 87, 142)  
                inline.From = position + solve(angle, crosshair.radius)
                inline.To = position + solve(angle, crosshair.radius + length)
                inline.Thickness = crosshair.width

                outline.Visible = true
                outline.From = position + solve(angle, crosshair.radius - 1)
                outline.To = position + solve(angle, crosshair.radius + length + 1)
                outline.Thickness = crosshair.width + 1.5    
            end
        else
            for idx = 1, 4 do
                drawings.crosshair[idx].Visible = false
                drawings.crosshair[idx + 4].Visible = false
            end
        end
    end
end)


visuals:AddToggle('MyToggle', {
    Text = 'Show check player notifications',
    Default = false,
    Callback = function(state)
        getgenv().BloodLossNotificationEnabled = state 
    end
})



local a = Tabs.Main:AddLeftGroupbox('Player')






a:AddToggle('MyToggle', {
    Text = 'No clip',
    Default = false,

    Callback = function(Value)
        getgenv().NoclipEnabled = Value 
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local function noclip()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.CanCollide == true then
            part.CanCollide = false
        end
    end
end
local function noclipLoop()
    RunService.Stepped:Connect(function()
        if getgenv().NoclipEnabled then
            noclip()
        end
    end)
end
noclipLoop()
    end
})

local IJ = false
a:AddToggle('MyToggle', {
    Text = 'Inf jump',
    Default = false,

    Callback = function(state)
             IJ = state
      game:GetService("UserInputService").JumpRequest:Connect(function()
          if IJ then
              game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
          end
      end)
    end
})



local xrayOn = false
a:AddToggle('MyToggle', {
    Text = 'X ray',
    Default = false,

    Callback = function(enabled)
        xrayOn = enabled
  if xrayOn then
    for _, descendant in pairs(workspace:GetDescendants()) do
      if descendant:IsA("BasePart") then
        if not descendant:FindFirstChild("OriginalTransparency") then
          local originalTransparency = Instance.new("NumberValue")
          originalTransparency.Name = "OriginalTransparency"
          originalTransparency.Value = descendant.Transparency
          originalTransparency.Parent = descendant
        end
        descendant.Transparency = 0.5
      end
    end
  else
    for _, descendant in pairs(workspace:GetDescendants()) do
      if descendant:IsA("BasePart") then
        if descendant:FindFirstChild("OriginalTransparency") then
          descendant.Transparency = descendant.OriginalTransparency.Value
          descendant.OriginalTransparency:Destroy()
        end
      end
    end
  end
    end
})

local fullBrightEnabled = false
a:AddToggle('MyToggle', {
    Text = 'Fullbright',
    Default = false,

    Callback = function(enabled)
             fullBrightEnabled = enabled 
    local Light = game:GetService("Lighting")
    local function doFullBright()
        if fullBrightEnabled then
            Light.Ambient = Color3.new(1, 1, 1)
            Light.ColorShift_Bottom = Color3.new(1, 1, 1)
            Light.ColorShift_Top = Color3.new(1, 1, 1)
        else
            Light.Ambient = Color3.new(0.5, 0.5, 0.5)
            Light.ColorShift_Bottom = Color3.new(0, 0, 0)
            Light.ColorShift_Top = Color3.new(0, 0, 0)
        end
    end
    doFullBright()
    Light.LightingChanged:Connect(doFullBright)
    end
})









local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

local colorEnabled = false 
local targetColor = Color3.new(0, 0.0, 1) 
local function setWorldColor()
    if colorEnabled then
        Lighting.Ambient = targetColor
        Lighting.OutdoorAmbient = targetColor
        Lighting.FogColor = targetColor
        Lighting.ColorShift_Bottom = targetColor
        Lighting.ColorShift_Top = targetColor
        if Lighting:FindFirstChildOfClass("Sky") then
            local sky = Lighting:FindFirstChildOfClass("Sky")
        end
    else
        Lighting.Ambient = Color3.fromRGB(127, 127, 127)
        Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        Lighting.FogColor = Color3.fromRGB(255, 255, 255)
        Lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
        Lighting.ColorShift_Top = Color3.fromRGB(0, 0, 0)
    end
end
RunService.RenderStepped:Connect(setWorldColor)



a:AddToggle('MyToggle', {
    Text = 'Atmosphere',
    Default = false,

    Callback = function(Value)
colorEnabled = Value 
    end
})

a:AddLabel('Color'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0), 
    Title = 'Color', 
    Transparency = 0, 

    Callback = function(Value)
                targetColor = Value 
    end
})

local Players = game:GetService("Players")
local function isNumber(str)
  if tonumber(str) ~= nil or str == 'inf' then
    return true
  end
end

getgenv().TPSpeed = 3
getgenv().TPWalk = false


a:AddToggle('MyToggle', {
    Text = 'Tp walk',
    Default = false,

    Callback = function(s)
getgenv().TPWalk = s
local hb = game:GetService("RunService").Heartbeat
local player = game:GetService("Players")
local lplr = player.LocalPlayer
local chr = lplr.Character
local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
while getgenv().TPWalk and hb:Wait() and chr and hum and hum.Parent do
  if hum.MoveDirection.Magnitude > 0 then
    if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
      chr:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
    else
      chr:TranslateBy(hum.MoveDirection)
    end
  end
end
    end
})

a:AddSlider('MySlider', {
    Text = 'Tp speed',
    Default = 1,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Compact = false,

    Callback = function(value)
        getgenv().TPSpeed = value
    end
})




local kk = Tabs.Esp:AddLeftGroupbox('Esp')


kk:AddToggle('MyToggle', {
    Text = 'Enabled',
    Default = false,

    Callback = function(Value)
        ESP.Enabled = Value;
    end
})


kk:AddToggle('MyToggle', {
    Text = 'Box',
    Default = false,

    Callback = function(Value)
        ESP.ShowBox = Value;
    end
})



kk:AddToggle('MyToggle', {
    Text = 'Name',
    Default = false,

    Callback = function(Value)
        ESP.ShowName = Value;
    end
})


kk:AddToggle('MyToggle', {
    Text = 'Health',
    Default = false,

    Callback = function(Value)
        ESP.ShowHealth = Value;
    end
})

kk:AddToggle('MyToggle', {
    Text = 'Tracer',
    Default = false,

    Callback = function(Value)
        ESP.ShowTracer = Value;
    end
})




kk:AddToggle('MyToggle', {
    Text = 'Distance',
    Default = false,

    Callback = function(Value)
        ESP.ShowDistance = Value;
    end
})


kk:AddToggle('MyToggle', {
    Text = 'Skeletons',
    Default = false,

    Callback = function(Value)
        ESP.ShowSkeletons = Value;
    end
})

 
local v = Tabs.Esp:AddRightGroupbox('Esp setting')

v:AddDropdown('MyDropdown', {
    Values = { 'Corner Box Esp', '2D' },
    Default = 2, 
    Multi = false, 

    Text = 'Box esp',
   
})

Options.MyDropdown:OnChanged(function(Value)
    ESP.BoxType = Value
end)



v:AddDropdown('MyDropdown', {
    Values = { 'Middle', 'Bottom', 'Top' },
    Default = 1, 
    Multi = false, 

    Text = 'Tracer esp',
   
})

Options.MyDropdown:OnChanged(function(Value)
    ESP.TracerPosition = Value;
end)

v:AddToggle('MyToggle', {
    Text = 'Team check',
    Default = false,

    Callback = function(Value)
        ESP.Teamcheck = Value;
    end
})



Library:SetWatermarkVisibility(true)


local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
	FrameCounter += 1;

	if (tick() - FrameTimer) >= 1 then
		FPS = FrameCounter;
		FrameTimer = tick();
		FrameCounter = 0;
	end;

	Library:SetWatermark(('Tbao Hub | %s fps | %s ms'):format(
		math.floor(FPS),
		math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
	));
end);

Library.KeybindFrame.Visible = false; 

Library:OnUnload(function()
	WatermarkConnection:Disconnect()
	Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')


MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightShift', NoUI = true, Text = 'Menu keybind' })


ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)


SaveManager:IgnoreThemeSettings()


SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })


ThemeManager:SetFolder('TbaoHub')
SaveManager:SetFolder('TbaoHub/Rivals')

SaveManager:BuildConfigSection(Tabs['UI Settings'])


ThemeManager:ApplyToTab(Tabs['UI Settings'])


SaveManager:LoadAutoloadConfig()



getgenv().enabled = false
getgenv().aimpart = "HumanoidRootPart"


local replicated_storage = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local camera = workspace.CurrentCamera
local utility = require(replicated_storage:FindFirstChild("Modules").Utility)

local function getPlayersOrEntities()
    local entities = {}
    for _, child in ipairs(workspace:GetChildren()) do
        if child:FindFirstChildOfClass("Humanoid") then
            table.insert(entities, child)
        elseif child.Name == "HurtEffect" then
            for _, hurtPlayer in ipairs(child:GetChildren()) do
                if hurtPlayer.ClassName ~= "Highlight" then
                    table.insert(entities, hurtPlayer)
                end
            end
        end
    end
    return entities
end

local function isEnemy(player)
    if not getgenv().teamcheck then
        return true 
    end
    return player.Team ~= players.LocalPlayer.Team 
end

local function getClosestPlayer()
    if not getgenv().enabled then return nil end

    local closest, closestDistance = nil, math.huge
    local localPlayer = players.LocalPlayer
    local character = localPlayer.Character

    if not character then return nil end

    for _, player in ipairs(getPlayersOrEntities()) do
        if player == localPlayer then continue end
        if not player:FindFirstChild(getgenv().aimpart) then continue end
        if not isEnemy(player) then continue end 

        local position, onScreen = camera:WorldToViewportPoint(player[getgenv().aimpart].Position)
        if not onScreen then continue end 

        local center = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        local distance = (center - Vector2.new(position.X, position.Y)).Magnitude

        if distance < closestDistance then
            closest = player
            closestDistance = distance
        end
    end

    return closest
end

local oldRaycast = utility.Raycast
utility.Raycast = function(...)
    local arguments = { ... }

    if #arguments > 0 and arguments[4] == 999 then
        local closest = getClosestPlayer()
        if closest then
            arguments[3] = closest[getgenv().aimpart].Position
        end
    end

    return oldRaycast(table.unpack(arguments))
end

